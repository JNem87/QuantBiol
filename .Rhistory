source("R/reduceToUniverse.R")
source("R/KS_enrich.test.R")
source("R/KS_enrich.elim.test.R")
source("R/wks.r")
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "GO", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse))
GOplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "GO", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
GOplotResults[table(myTestDataN1$x) > 20 & !sapply(GOplotResults,is.null)]
dev.off()
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
PathwayplotResults[table(myTestDataN1$x) > 20 & !sapply(PathwayplotResults,is.null)]
dev.off()
ComplexplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "COMPLEX", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
ComplexplotResults[table(myTestDataN1$x) > 20 & !sapply(ComplexplotResults,is.null)]
dev.off()
clusterUniverse <- read.table("../Transposon/results/CRISPR Knockout Analysis/clusterUniverse.tsv", header = F, stringsAsFactors = F)
myTestData2i <- read.delim("../Transposon/results/CRISPR Knockout Analysis/2i_clusters.csv", header = T, sep=",")
myTestDataN1 <- read.delim("../Transposon/results/CRISPR Knockout Analysis/24h_clusters.csv", header = T, sep=",")
myN1Order <- read.delim("../Transposon/results/CRISPR Knockout Analysis/24h_clusters_order.csv", header = T, sep=",")
myN1Order$revord <- rev(myN1Order$X)
table(myTestData2i$x)
table(myTestDataN1$x)
GOplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "GO", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
GOplotResults[table(myTestDataN1$x) > 20 & !sapply(GOplotResults,is.null)]
dev.off()
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
PathwayplotResults[table(myTestDataN1$x) > 20 & !sapply(PathwayplotResults,is.null)]
table(myTestDataN1$x)
myTestDataN1
myTestDataN1$x
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
debug(fisher_enrich.test)
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
debug(buildTwobyTwoMatrix)
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
clusterUniverse
clusterUniverse <- as.character(clusterUniverse[,1])
GOplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "GO", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
GOplotResults[table(myTestDataN1$x) > 20 & !sapply(GOplotResults,is.null)]
dev.off()
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
PathwayplotResults[table(myTestDataN1$x) > 20 & !sapply(PathwayplotResults,is.null)]
dev.off()
ComplexplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "COMPLEX", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
ComplexplotResults[table(myTestDataN1$x) > 20 & !sapply(ComplexplotResults,is.null)]
dev.off()
undebug(buildTwobyTwoMatrix)
undebug(fisher_enrich.test)
GOplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "GO", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/GO_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
GOplotResults[table(myTestDataN1$x) > 20 & !sapply(GOplotResults,is.null)]
dev.off()
PathwayplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "PATHWAY", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Pathway_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
PathwayplotResults[table(myTestDataN1$x) > 20 & !sapply(PathwayplotResults,is.null)]
dev.off()
ComplexplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "COMPLEX", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
ComplexplotResults[table(myTestDataN1$x) > 20 & !sapply(ComplexplotResults,is.null)]
dev.off()
myN1Order
source("R/ultimateEnrich.R")
ComplexplotResults <-  lapply(as.numeric(names(table(myTestDataN1$x))), function(cl_num){
myTestData2i_cl <- data.frame(x=myTestDataN1$x[myTestDataN1$x == cl_num], row.names=myTestDataN1$X[myTestDataN1$x == cl_num])
myTestData1 <- myTestData2i_cl[order(myTestData2i_cl[,1]),,drop=F]
tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.05, type = "COMPLEX", maxSetSize=200, minHitNum = 3, GeneUniverse = clusterUniverse)
if(!is.null(tmpRes)){
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
} else {return(NULL)}
})
#pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_2i_clusters_test.pdf", width = 13, height = 8)
pdf("/data/user/mgarmha1/Projects/Transposon/graphs/results/EnrichmentPlots/Complex_Fisher_crispr_N1_clusters_test.pdf", width = 13, height = 8)
ComplexplotResults[table(myTestDataN1$x) > 20 & !sapply(ComplexplotResults,is.null)]
dev.off()
biocLite("Mus.musculus")
install.packages("topGO")
library(tximport)
library(tximportData)
library(DESeq2)
library(readr) # to read in tsv files
library(biomaRt) # id to gene name etc.
library(tximport)
library(tximportData)
library(DESeq2)
library(readr) # to read in tsv files
library(biomaRt) # id to gene name etc.
library(pheatmap) # for heatmaps
library(ggplot2)
library(gridExtra)
library(VennDiagram)
library(topGO)
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
library(topGO)
library(RColorBrewer)
library(vsn)
dir = "~/woundHealing/data/output.untrimmed.kallisto"
samples = scan(file="~/woundHealing/data/samples.txt", what = "character", dec = ".")
files <- file.path(dir, samples, "abundance.tsv")
names(files) <- samples
all(file.exists(files))
source("R/getGOMatrix.R")
source("R/getGeneMatrix.R")
source("R/buildDataMatrix.R")
source("R/ultimateEnrich.R")
source("R/buildTwobyTwoMatrix.R")
source("R/buildTwobyTwoMatrix2.R")
source("R/fisher_enrich.test.R")
source("R/fisher_enrich.elim.test.R")
source("R/transformtosetlist.R")
source("R/eliminatefrom2by2matrix.R")
source("R/eliminateFromSetMatrix.R")
source("R/getPathwayMatrix.R")
source("R/getComplexMatrix.R")
source("R/reduceToUniverse.R")
source("R/KS_enrich.test.R")
source("R/KS_enrich.elim.test.R")
source("R/wks.r")
require(Mus.musculus)
require(hash)
require(reactome.db)
require(hom.Hs.inp.db)
require(org.Hs.eg.db)
require(biomaRt)
require(RJSONIO)
require(reshape2)
require(ggplot2)
require(DOSE)
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("Mus.musculus")
biocLite("RJSONIO")
biocLite("DOSE")
require(Mus.musculus)
require(hash)
require(reactome.db)
require(hom.Hs.inp.db)
require(org.Hs.eg.db)
require(biomaRt)
require(RJSONIO)
require(reshape2)
require(ggplot2)
require(DOSE)
myTestData <- read.delim("~/Downloads/hitlist.csv")
myTestData <- cbind(myTestData, 1)
rownames(myTestData) <- myTestData[,1]
myTestData1 <- myTestData[,2, drop=FALSE]
myTestData1
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher_elim", threshold = 0.01, type = "GO", maxSetSize=200, minHitNum = 3))
debug(ultimateEnrich)
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "GO", maxSetSize=200, minHitNum = 3))
length(myMatrix)
myMatrix[[1]][1]
myMatrix[[1]]
myMatrix[2]
myGeneUniverse
myMatrix[[1]]
myMatrix[1]
str(myMatrix)
source("R/buildTwobyTwoMatrix.R")
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "GO", maxSetSize=200, minHitNum = 3))
dim(myMatrix)
myMatrix[[1]]
myMatrix1
myMatrix
undebug(ultimateEnrich)
debug(buildTwobyTwoMatrix)
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "GO", maxSetSize=200, minHitNum = 3))
hHitList
myGeneUniverse
inputMatrix[,2]
names(geneList)
inputMatrix[,1]
names(geneList)
genesInUniverse <- Filter(length, genesInUniverse)
genesInUniverse
source("R/buildTwobyTwoMatrix.R")
source("R/ultimateEnrich.R")
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "GO", maxSetSize=200, minHitNum = 3))
tmpRes
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:",myN1Order$revord[myN1Order$x == cl_num]))
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:"))
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher_elim", threshold = 0.01, type = "GO", maxSetSize=200, minHitNum = 3))
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:"))
myTestData1
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "PATHWAY", maxSetSize=200, minHitNum = 3))
require(reactome.db)
require(reactome.db)
biocLite("reactome.db")
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "PATHWAY", maxSetSize=200, minHitNum = 3))
require(reactome.db)
require(reactome.db)
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "PATHWAY", maxSetSize=200, minHitNum = 3))
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:"))
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher", threshold = 0.01, type = "COMPLEX", maxSetSize=200, minHitNum = 3))
ggplot( tmpRes[[2]], aes(x=pval, y=factor(PATHNAME, levels = tmpRes[[2]]$PATHNAME), size=as.factor(hits), color=cov)) +
geom_point() +
guides(fill=guide_legend(title = "test")) +
scale_colour_gradient(low="red", high="blue", name="Coverage", guide = "colourbar") +
scale_size_discrete(name="# of hits") +
theme_bw() +
xlab("-log10(P-Value)") +
ylab("Significant Go Terms - Fisher Test") +
ggtitle(paste("Significant Go Terms Cluster:"))
tmpRes
data.frame(x = rep(c(0,0.5,1),15), row.names = 1:(3*15))
myTestData <- read.delim("~/Downloads/hitlist.csv")
myTestData <- cbind(myTestData, 0)
row.names(myTestData) <- myTestData[,1]
myTestData
myTestData1 <- myTestData[-1,2, drop=FALSE]
myTestData1
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher_elim", threshold = 0.05, type = "PATHWAY", maxSetSize=200))
source("R/getGOMatrix.R")
source("R/getGeneMatrix.R")
source("R/buildDataMatrix.R")
source("R/ultimateEnrich.R")
source("R/buildTwobyTwoMatrix.R")
source("R/buildTwobyTwoMatrix2.R")
source("R/fisher_enrich.test.R")
source("R/fisher_enrich.elim.test.R")
source("R/transformtosetlist.R")
source("R/eliminatefrom2by2matrix.R")
source("R/eliminateFromSetMatrix.R")
source("R/getPathwayMatrix.R")
source("R/getComplexMatrix.R")
source("R/reduceToUniverse.R")
source("R/KS_enrich.test.R")
source("R/KS_enrich.elim.test.R")
source("R/wks.r")
require(Mus.musculus)
require(hash)
require(reactome.db)
require(hom.Hs.inp.db)
require(org.Hs.eg.db)
require(biomaRt)
require(RJSONIO)
require(reshape2)
require(ggplot2)
require(DOSE)
require(profvis)
system.time(tmpRes <- ultimateEnrich(myTestData1,test = "fisher_elim", threshold = 0.05, type = "PATHWAY", maxSetSize=200))
head(myTestData1)
str(myTestData1)
